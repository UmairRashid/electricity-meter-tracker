#!/bin/bash
# Electricity Meter Tracker - Global Command
# Usage: emt [start|stop|restart|rebuild|status|logs|backup|restore|help]

# Project directory (auto-detect or update this path if you move the project)
# Resolve symlink to get the actual script location
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
PROJECT_DIR="${EMT_PROJECT_DIR:-$SCRIPT_DIR}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[EMT]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[EMT]${NC} $1"
}

print_error() {
    echo -e "${RED}[EMT]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[EMT]${NC} $1"
}

# Check if project directory exists
if [ ! -d "$PROJECT_DIR" ]; then
    print_error "Project directory not found: $PROJECT_DIR"
    print_error "Please update the PROJECT_DIR variable in this script."
    exit 1
fi

# Change to project directory
cd "$PROJECT_DIR"

# Check if Docker is running
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker Desktop first."
        exit 1
    fi
}

# Create backup directory if it doesn't exist
ensure_backup_dir() {
    BACKUP_DIR="$PROJECT_DIR/backups"
    if [ ! -d "$BACKUP_DIR" ]; then
        mkdir -p "$BACKUP_DIR"
        print_status "Created backup directory: $BACKUP_DIR"
    fi
}

# Backup database function
backup_database() {
    print_status "Creating database backup..."
    
    # Ensure backup directory exists
    ensure_backup_dir
    
    # Check if database container is running
    if ! docker-compose ps database | grep -q "Up"; then
        print_error "Database container is not running. Cannot create backup."
        return 1
    fi
    
    # Load environment variables
    source .env
    
    # Create backup filename
    BACKUP_FILE="$PROJECT_DIR/backups/meter_tracker_backup.sql"
    
    # Remove old backup if exists
    if [ -f "$BACKUP_FILE" ]; then
        rm "$BACKUP_FILE"
        print_status "Removed previous backup"
    fi
    
    # Create backup using pg_dump
    if docker exec meter_tracker_db pg_dump -U "$DB_USER" -d "$DB_NAME" > "$BACKUP_FILE"; then
        print_success "Database backup created: $BACKUP_FILE"
        print_status "Backup size: $(du -h "$BACKUP_FILE" | cut -f1)"
    else
        print_error "Failed to create database backup"
        return 1
    fi
}

# Restore database function
restore_database() {
    BACKUP_FILE="$PROJECT_DIR/backups/meter_tracker_backup.sql"
    
    # Check if backup file exists
    if [ ! -f "$BACKUP_FILE" ]; then
        print_error "No backup file found at: $BACKUP_FILE"
        print_error "Please ensure you have created a backup first using 'emt backup'"
        return 1
    fi
    
    # Check if database container is running
    if ! docker-compose ps database | grep -q "Up"; then
        print_error "Database container is not running. Please start the application first."
        print_error "Run 'emt start' and then try the restore command again."
        return 1
    fi
    
    # Load environment variables
    source .env
    
    # Confirm restoration
    echo ""
    print_warning "‚ö†Ô∏è  WARNING: This will completely replace your current database!"
    print_warning "All current meter readings and base readings will be lost."
    echo ""
    echo "Backup file: $BACKUP_FILE"
    echo "Backup size: $(du -h "$BACKUP_FILE" | cut -f1)"
    echo ""
    read -p "Are you sure you want to restore from backup? (yes/no): " -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then
        print_status "Restore cancelled by user"
        return 0
    fi
    
    print_status "Restoring database from backup..."
    
    # Drop and recreate database
    docker exec meter_tracker_db dropdb -U "$DB_USER" "$DB_NAME" 2>/dev/null || true
    docker exec meter_tracker_db createdb -U "$DB_USER" "$DB_NAME"
    
    # Restore from backup
    if docker exec -i meter_tracker_db psql -U "$DB_USER" -d "$DB_NAME" < "$BACKUP_FILE"; then
        print_success "Database restored successfully from backup!"
        print_status "You may need to restart the application for changes to take effect."
    else
        print_error "Failed to restore database from backup"
        return 1
    fi
}

# Start function
start_emt() {
    print_status "Starting Electricity Meter Tracker..."
    check_docker
    
    print_status "Starting containers..."
    docker-compose up -d
    
    print_status "Waiting for services to be ready..."
    sleep 10
    
    print_status "Checking service status..."
    docker-compose ps
    
    # Get local IP for network access
    LOCAL_IP=$(ifconfig | grep "inet " | grep -v 127.0.0.1 | head -1 | awk '{print $2}')
    
    # Get hostname from environment if configured
    HOSTNAME=$(source .env && echo $HOSTNAME)
    
    echo ""
    print_success "Electricity Meter Tracker is running!"
    echo "üåê Local access: http://localhost:3000"
    echo "üì± Network access: http://$LOCAL_IP:3000"
    if [ -n "$HOSTNAME" ]; then
        echo "üè† Hostname access: http://$HOSTNAME.local:3000"
    fi
    echo ""
    echo "Commands:"
    echo "  emt logs    - View logs"
    echo "  emt stop    - Stop application"
    echo "  emt status  - Check status"
}

# Stop function
stop_emt() {
    print_status "Stopping Electricity Meter Tracker..."
    check_docker
    
    # Check if containers are running
    if [ -z "$(docker-compose ps -q)" ]; then
        print_warning "No containers are currently running."
        exit 0
    fi
    
    print_status "Current status:"
    docker-compose ps
    
    print_status "Stopping containers..."
    docker-compose down
    
    print_success "Containers stopped successfully!"
    echo ""
    echo "Commands:"
    echo "  emt start    - Restart application"
    echo "  emt backup   - Create database backup"
    echo "  emt restore  - Restore from backup"
    echo "  emt status   - Check status"
}

# Status function
status_emt() {
    print_status "Checking Electricity Meter Tracker status..."
    check_docker
    
    echo ""
    print_status "Container Status:"
    docker-compose ps
    
    echo ""
    print_status "Resource Usage:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" $(docker-compose ps -q) 2>/dev/null || print_warning "No running containers found"
    
    # Get local IP
    LOCAL_IP=$(ifconfig | grep "inet " | grep -v 127.0.0.1 | head -1 | awk '{print $2}')
    
    # Get hostname from environment if configured
    HOSTNAME=$(source .env && echo $HOSTNAME)
    
    echo ""
    print_status "Access URLs:"
    echo "üåê Local: http://localhost:3000"
    echo "üì± Network: http://$LOCAL_IP:3000"
    if [ -n "$HOSTNAME" ]; then
        echo "üè† Hostname: http://$HOSTNAME.local:3000"
    fi
}

# Logs function
logs_emt() {
    print_status "Showing Electricity Meter Tracker logs..."
    check_docker
    
    if [ -z "$(docker-compose ps -q)" ]; then
        print_warning "No containers are currently running."
        print_status "Showing last logs..."
        docker-compose logs --tail=50
    else
        print_status "Following live logs (Ctrl+C to exit)..."
        docker-compose logs -f
    fi
}

# Restart function
restart_emt() {
    print_status "Restarting Electricity Meter Tracker..."
    stop_emt
    echo ""
    start_emt
}

# Rebuild function
rebuild_emt() {
    print_status "Rebuilding Electricity Meter Tracker..."
    check_docker
    
    # Check if containers are running and stop them first
    if [ -n "$(docker-compose ps -q)" ]; then
        print_status "Stopping running containers..."
        docker-compose down
    fi
    
    print_status "Building Docker images..."
    if [ "$2" = "--no-cache" ]; then
        print_status "Building with --no-cache flag (complete rebuild)..."
        docker-compose build --no-cache
    else
        docker-compose build
    fi
    
    if [ $? -eq 0 ]; then
        print_success "Build completed successfully!"
        echo ""
        print_status "Starting containers with new build..."
        start_emt
    else
        print_error "Build failed. Please check the error messages above."
        exit 1
    fi
}

# Help function
show_help() {
    echo "Electricity Meter Tracker (EMT) - Global Command"
    echo ""
    echo "Usage: emt [command]"
    echo ""
    echo "Commands:"
    echo "  start     Start the application"
    echo "  stop      Stop the application"
    echo "  restart   Restart the application"
    echo "  rebuild   Rebuild Docker images and restart"
    echo "  status    Show application status"
    echo "  logs      View application logs"
    echo "  backup    Create database backup"
    echo "  restore   Restore database from backup"
    echo "  help      Show this help message"
    echo ""
    echo "Backup Information:"
    echo "  ‚Ä¢ Database backup is created on-demand with 'emt backup'"
    echo "  ‚Ä¢ Only one backup is kept (newest overwrites oldest)"
    echo "  ‚Ä¢ Backup location: $PROJECT_DIR/backups/"
    echo "  ‚Ä¢ Restore requires confirmation and running application"
    echo ""
    echo "Project location: $PROJECT_DIR"
}

# Main command logic
case "$1" in
    start)
        start_emt
        ;;
    stop)
        stop_emt
        ;;
    restart)
        restart_emt
        ;;
    rebuild)
        rebuild_emt "$@"
        ;;
    status)
        status_emt
        ;;
    logs)
        logs_emt
        ;;
    backup)
        backup_database
        ;;
    restore)
        restore_database
        ;;
    help|--help|-h)
        show_help
        ;;
    "")
        print_error "No command specified."
        echo ""
        show_help
        exit 1
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac